// Mocks generated by Mockito 5.4.6 from annotations
// in lexxi/test/application/auth/login_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:lexxi/domain/auth/model/login_model.dart' as _i5;
import 'package:lexxi/domain/auth/model/register_model.dart' as _i6;
import 'package:lexxi/domain/auth/model/user.dart' as _i4;
import 'package:lexxi/domain/auth/repositories/login_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i2.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.User?> auth(_i5.LoginModel? login) =>
      (super.noSuchMethod(
            Invocation.method(#auth, [login]),
            returnValue: _i3.Future<_i4.User?>.value(),
          )
          as _i3.Future<_i4.User?>);

  @override
  _i3.Future<_i4.User?> getUserLocal() =>
      (super.noSuchMethod(
            Invocation.method(#getUserLocal, []),
            returnValue: _i3.Future<_i4.User?>.value(),
          )
          as _i3.Future<_i4.User?>);

  @override
  _i3.Future<_i4.User?> getInfoUser(_i4.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#getInfoUser, [user]),
            returnValue: _i3.Future<_i4.User?>.value(),
          )
          as _i3.Future<_i4.User?>);

  @override
  _i3.Future<void> registerUser(_i6.RegisterModel? user) =>
      (super.noSuchMethod(
            Invocation.method(#registerUser, [user]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> changePassword(String? password, String? newPassword) =>
      (super.noSuchMethod(
            Invocation.method(#changePassword, [password, newPassword]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}
