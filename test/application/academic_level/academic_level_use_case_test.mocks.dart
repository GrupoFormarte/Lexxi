// Mocks generated by Mockito 5.4.6 from annotations
// in lexxi/test/application/academic_level/academic_level_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:lexxi/domain/academic_level/model/academic_level.dart' as _i4;
import 'package:lexxi/domain/academic_level/repository/academic_level_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [AcademicLevelRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAcademicLevelRepository extends _i1.Mock
    implements _i2.AcademicLevelRepository {
  MockAcademicLevelRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.AcademicLevelModel?> getLevelById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getLevelById, [id]),
            returnValue: _i3.Future<_i4.AcademicLevelModel?>.value(),
          )
          as _i3.Future<_i4.AcademicLevelModel?>);
}
