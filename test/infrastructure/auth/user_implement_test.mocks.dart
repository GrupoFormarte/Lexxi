// Mocks generated by Mockito 5.4.6 from annotations
// in lexxi/test/infrastructure/auth/user_implement_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:lexxi/domain/auth/model/user.dart' as _i4;
import 'package:lexxi/infrastructure/auth/data_sources/local_data_source/localstorage_shared.dart'
    as _i5;
import 'package:lexxi/infrastructure/auth/data_sources/remote_data_source.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i2.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<dynamic> register(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#register, [data]),
            returnValue: _i3.Future<dynamic>.value(),
          )
          as _i3.Future<dynamic>);

  @override
  _i3.Future<Map<String, dynamic>?> login(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#login, [data]),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<Map<String, dynamic>?> loginSaf(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#loginSaf, [data]),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<Map<String, dynamic>?> getDataUser(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#getDataUser, [data]),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<bool> newPassword(
    String? password,
    String? newPassword,
    String? token,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#newPassword, [password, newPassword, token]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<Map<String, dynamic>?> getInfouUer(_i4.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#getInfouUer, [user]),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);
}

/// A class which mocks [LocalstorageShared].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalstorageShared extends _i1.Mock
    implements _i5.LocalstorageShared {
  MockLocalstorageShared() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool?> addToSharedPref({
    required String? key,
    required dynamic value,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addToSharedPref, [], {#key: key, #value: value}),
            returnValue: _i3.Future<bool?>.value(),
          )
          as _i3.Future<bool?>);

  @override
  _i3.Future<dynamic> readFromSharedPref(String? key, Type? type) =>
      (super.noSuchMethod(
            Invocation.method(#readFromSharedPref, [key, type]),
            returnValue: _i3.Future<dynamic>.value(),
          )
          as _i3.Future<dynamic>);

  @override
  dynamic deleteFromSharedPref(String? key) =>
      super.noSuchMethod(Invocation.method(#deleteFromSharedPref, [key]));

  @override
  dynamic updateDataInSharedPref({
    required String? key,
    required dynamic value,
  }) => super.noSuchMethod(
    Invocation.method(#updateDataInSharedPref, [], {#key: key, #value: value}),
  );
}
